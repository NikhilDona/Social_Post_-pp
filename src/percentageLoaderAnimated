import { View, Text, Animated, TextInput, StyleSheet } from 'react-native'
import React, { useEffect, useRef } from 'react'
import { Svg, G, Circle } from 'react-native-svg'

const Donut = ({
    percentage = 100,
    radius = 40,
    strokewidth = 10,
    duration = 2000,
    color = "tomato",
    delay = 0,
    textcolor,
    max = 100
}) => {
    const animatedValue = useRef(new Animated.Value(0)).current
    const inputRef = useRef(new Animated.Value(0)).current;


    const circleRef = React.useRef();
    const halfCircle = radius + strokewidth;
    const circleCircumference = 2 * Math.PI * radius

    const AnimatedCircle = Animated.createAnimatedComponent(Circle)
    const AnimatedInput = Animated.createAnimatedComponent(TextInput)

    const animation = (toValue) => {
        return Animated.timing(animatedValue, {
            toValue,
            duration,
            delay,
            useNativeDriver: true
        }).start(() => {
            // animation(toValue === 0 ? percentage : 0)
        });
    };

    useEffect(() => {
        animation(percentage)
        animatedValue.addListener((v) => {
            if (circleRef.current) {
                const maxPerc = (100 * v.value) / max;
                const strokeDashoffset = circleCircumference - (circleCircumference * maxPerc) / 100;
                circleRef.current.setNativeProps({
                    strokeDashoffset
                })
            }
            if (inputRef?.current) {
                inputRef.current.setNativeProps({
                    text: `${Math.round(v.value)}`
                })
            }
        })

        return () => {
            animatedValue.removeAllListeners();
        }
    }, [max, percentage])

    return (
        <View>
            <Svg
                width={radius * 2}
                height={radius * 2}
                viewBox={`0 0 ${halfCircle * 2} ${halfCircle * 2}`}
            >
                <G rotation='-90' origin={`${halfCircle},${halfCircle}`}>
                    <Circle
                        cx="50%"
                        cy="50%"
                        stroke={color}
                        strokeWidth={strokewidth}
                        strokeOpacity={0.2}
                        r={radius}
                        fill={"transparent"}
                    />
                    <AnimatedCircle
                        ref={circleRef}
                        cx="50%"
                        cy="50%"
                        stroke={color}
                        strokeWidth={strokewidth}
                        r={radius}
                        fill={"transparent"}
                        strokeDasharray={circleCircumference}
                        strokeDashoffset={circleCircumference}
                        strokeLinecap="round"
                    />
                </G>
            </Svg>
            <AnimatedInput
                ref={inputRef}
                editable={false}
                underlineColorAndroid='transparent'
                defaultValue='0'
                style={[
                    StyleSheet.absoluteFillObject,
                    {
                        fontSize: radius / 2, color: textcolor ?? color, fontWeight: "900", textAlign: "center"
                    }
                ]}
            />
        </View>
    )
}

export default Donut
